%% Main

clc
clear
close all

%%

%Basic parameters%

K = [5000 0.1  2000; %Intrinsic parameters, K, 3*3, 5 degrees of freedom%
    0   4000 1000;
    0   0    1];

Sphere_num = 3; % sphere images should >= 3
  

%Rotations

% a1=normrnd(0,1,3,3);%R为旋转矩阵（正交矩阵）,3*3%
% [R1,~]=qr(a1);
% a2=normrnd(0,1,3,3);
% [R2,~]=qr(a2); 
% a3=normrnd(0,1,3,3);
% [R3,~]=qr(a3); 

R = zeros(3, 3, Image_num);
R(:,:,1) = [-0.122737383435346,-0.039404033112337,0.991656622466631;-0.174983080118159,-0.982698191829029,-0.060705728299062;0.976891220341245,-0.180973992469746,0.113718765688666];
R(:,:,2) = [-0.814187578950629,0.051333088522194,0.578328194285291;-0.285554006383093,-0.902688892048257,-0.321887672350549;0.505526948560685,-0.427220877527611,0.749616452649927];
R(:,:,3) = [-0.845420468672276,0.372508376815001,0.382755457639211;-0.533697771741772,-0.617045054899464,-0.578292390285386;0.020758602742380,-0.693175958488731,0.720469410166326];

T = normrnd(0, 2, 3, 3);

x1=[3;2;2];
r1=1;
x2=[7;3;5];
r2=2;
x3=[2;5;1];
r3=1;

X = [x1; x2; x3];
Rad = [r1; r2; r3];


%%
%Calibration

[sphere_image] = generate_sphere_image(Image_num, X, Rad, K, R, T); % generate the simulation sphere images

[est_T_K] = T(sphere_image); % use sphere images to calibration besed on method T

[est_DC_K] = DC(sphere_image); % use sphere images to calibration besed on method DC


%%
%Error

rfe_error = (est_T_K(1,1) - K(1,1))/K(1,1); %relative error
fe_error = (est_T_K(2,2) - K(2,2))/K(2,2);
s_error = (est_T_K(1,2) - K(1,2))/K(1,2);
u0_error = (est_T_K(1,3) - K(1,3))/K(1,3);
v0_error = (est_T_K(2,3) - K(2,3))/K(2,3);
l_error = (est_T_l - l)/l;
